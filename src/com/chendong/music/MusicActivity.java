package com.chendong.music;import java.io.IOException;import android.app.Activity;import android.content.Context;import android.content.SharedPreferences;import android.media.AudioManager;import android.media.MediaPlayer;import android.media.AudioManager.OnAudioFocusChangeListener;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnPreparedListener;import android.os.Bundle;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.ImageView;import android.widget.MediaController;import android.widget.TextView;import android.widget.Toast;public class MusicActivity extends Activity implementsOnAudioFocusChangeListener {	private MediaPlayer _myMediaPlayer; 	private String path;	private String name;	private ImageView playView;	private ImageView stopView;	private TextView titleText;	private String type;	private MediaController controller;		@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.play_music);		_myMediaPlayer = new MediaPlayer(); 		path = (String)getIntent().getSerializableExtra("path");		name = (String)getIntent().getSerializableExtra("name");		type = (String)getIntent().getSerializableExtra("type");		findView();		listener();		controller = new MediaController(this);		controller.show(0); 		if(type.equals("local"))			playLocalMusic();		else if(type.equals("remote"))			prepareMusicAsynchronous();	}			void findView() {		ViewHolder.start = (Button) findViewById(R.id.start);		ViewHolder.stop = (Button) findViewById(R.id.stop);		ViewHolder.next = (Button) findViewById(R.id.next);		ViewHolder.next.setVisibility(View.INVISIBLE);		ViewHolder.pause = (Button) findViewById(R.id.pause);		ViewHolder.last = (Button) findViewById(R.id.last);		ViewHolder.last.setVisibility(View.INVISIBLE);				playView = (ImageView) findViewById(R.id.playing);		stopView = (ImageView) findViewById(R.id.stoping);		titleText = (TextView) findViewById(R.id.title);		if (name!=null) {			titleText.setText(name);		}			changeVisible();	}	private void changeVisible() {		playView.setVisibility(View.VISIBLE);		stopView.setVisibility(View.GONE);	}		private void changeInVisible() {		playView.setVisibility(View.GONE);		stopView.setVisibility(View.VISIBLE);	}		void playLocalMusic() {				_myMediaPlayer.reset();		try {			_myMediaPlayer.setDataSource(path);			_myMediaPlayer.prepare();			AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);			int result = audioManager.requestAudioFocus(this,					AudioManager.STREAM_MUSIC,					AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);			if (result != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {				Toast.makeText(this, "cannot get audio focus!", Toast.LENGTH_SHORT).show();			}			_myMediaPlayer.start();			_myMediaPlayer.setOnCompletionListener(new OnCompletionListener() {				@Override				public void onCompletion(MediaPlayer mp) {					nextMusic();				}			});		} catch (IllegalArgumentException e) { 			e.printStackTrace();		} catch (SecurityException e) { 			e.printStackTrace();		} catch (IllegalStateException e) { 			e.printStackTrace();		} catch (IOException e) { 			e.printStackTrace();		}	}	void prepareMusicAsynchronous() {		AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);		int result = audioManager.requestAudioFocus(this,				AudioManager.STREAM_MUSIC,				AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);		if (result != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {			// could not get audio focus.			Toast.makeText(this, "cannot get audio focus!", Toast.LENGTH_LONG).show();		}		if (_myMediaPlayer != null) {			_myMediaPlayer.reset();		}				try { //			//TODO it is for test convenience//			path = "http://dc220.4shared.com/img/302542695/d0964170/" +//					"dlink__2Fdownload_2FxdlEtbxq_3Ftsid_3D20101119-54721-4807ddd0/preview.mp3";			_myMediaPlayer.setDataSource(path);			_myMediaPlayer.prepareAsync();		} catch (IllegalStateException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		catch (IllegalArgumentException e) {			e.printStackTrace();		}				_myMediaPlayer.setOnPreparedListener(new OnPreparedListener() {			@Override			public void onPrepared(MediaPlayer asyncMediaPlayer) {				_myMediaPlayer.start();				saveHistory("history",path);				_myMediaPlayer						.setOnCompletionListener(new OnCompletionListener() {							@Override							public void onCompletion(MediaPlayer mp) { 							}						});			}		});	}		/**	 * 把指定AutoCompleteTextView中内容保存到sharedPreference中指定的字符段	 * @param field  保存在sharedPreference中的字段名	 * @param auto  要操作的AutoCompleteTextView	 */	private void saveHistory(String field,String text) {		SharedPreferences sp = getSharedPreferences("music_url", 0);		String longhistory = sp.getString(field, "nothing");		if (!longhistory.contains(text + ",")) {			StringBuilder sb = new StringBuilder(longhistory);			sb.insert(0, text + ",");			sp.edit().putString("history", sb.toString()).commit();		}	}		void listener() {		ViewHolder.stop.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if (_myMediaPlayer.isPlaying()) {					_myMediaPlayer.reset();					changeInVisible();				}			}		});		ViewHolder.start.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				//				playMusic();				if(type.equals("local"))					playLocalMusic();				else if(type.equals("remote"))					prepareMusicAsynchronous();				changeVisible();			}		});		ViewHolder.next.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				nextMusic();			}		});		ViewHolder.pause.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				if (_myMediaPlayer.isPlaying()) {					_myMediaPlayer.pause();					// abandon audio focus					AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);					am.abandonAudioFocus(MusicActivity.this);					changeInVisible();				} else {					_myMediaPlayer.start();					changeVisible();				}			}		});		ViewHolder.last.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				lastMusic();			}		});	}		void nextMusic() {//		if (++_currentListItem >= _myMusicList.size()) {//			_currentListItem = 0;//		}//		playMusic(_currentListItem);	}	void lastMusic() {//		if (--_currentListItem < 0) {//			_currentListItem = _myMusicList.size() - 1;//		}//		playMusic(_currentListItem);	}			@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			_myMediaPlayer.stop();			_myMediaPlayer.release();			this.finish();			return true;		}		return super.onKeyDown(keyCode, event);	}	@Override	public void onAudioFocusChange(int focusChange) {			}}